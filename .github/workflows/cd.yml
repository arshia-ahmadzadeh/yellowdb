on:
  push:
    tags:
      - "v*"
  workflow_dispatch:
    inputs:
      environment:
        description: "Deployment environment"
        required: true
        default: "pypi"
        type: choice
        options:
          - pypi

jobs:
  check-ci-passed:
    name: Verify CI Passed
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Check CI workflow status
        run: |
          echo "ℹ️  Verifying that CI workflow passed for this commit..."
          echo "Commit: ${{ github.sha }}"

          RUNS=$(gh run list --workflow=ci.yml --commit=${{ github.sha }} --status=success)

          if [ -z "$RUNS" ]; then
            echo "❌ No successful CI runs found for this commit"
            exit 1
          fi

          echo "✓ CI workflow passed"
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  build:
    name: Build Distribution
    runs-on: ubuntu-latest
    needs: check-ci-passed
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"
          cache: "pip"

      - name: Install build dependencies
        run: |
          python -m pip install --upgrade pip
          pip install "build>=1.0.0" "wheel>=0.42.0" "setuptools>=68.0.0"

      - name: Build distribution
        run: python -m build

      - name: Verify distribution
        run: |
          pip install twine
          twine check dist/*
          ls -lh dist/

      - name: Store distribution packages
        uses: actions/upload-artifact@v4
        with:
          name: python-package-distributions
          path: dist/
          retention-days: 7

  publish-to-pypi:
    name: Publish to PyPI
    if: startsWith(github.ref, 'refs/tags')
    needs: build
    runs-on: ubuntu-latest
    environment:
      name: pypi
      url: https://pypi.org/project/yellowdb

    steps:
      - name: Download distributions
        uses: actions/download-artifact@v4
        with:
          name: python-package-distributions
          path: dist/

      - name: Publish to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          password: ${{ secrets.PYPI_API_TOKEN }}
          skip-existing: true

      - name: Verify PyPI publication
        run: |
          echo "✓ Package published to PyPI"
          echo "  Repository: https://pypi.org/project/yellowdb"
          VERSION=$(ls dist/yellowdb-*.whl | sed 's/.*yellowdb-\([0-9.]*\).*/\1/')
          echo "  Version: $VERSION"

  github-release:
    name: Create GitHub Release
    if: startsWith(github.ref, 'refs/tags')
    needs: publish-to-pypi
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download distributions
        uses: actions/download-artifact@v4
        with:
          name: python-package-distributions
          path: dist/

      - name: Generate release notes
        id: release_notes
        run: |
          VERSION=${GITHUB_REF#refs/tags/}
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "**Release: $VERSION**" > /tmp/release_notes.md
          echo "" >> /tmp/release_notes.md
          echo "### Assets" >> /tmp/release_notes.md
          ls -1 dist/ | sed 's/^/- /' >> /tmp/release_notes.md

      - name: Create Release
        uses: softprops/action-gh-release@v2
        with:
          files: dist/*
          body_path: /tmp/release_notes.md
          draft: false
          prerelease: ${{ contains(github.ref, 'alpha') || contains(github.ref, 'beta') || contains(github.ref, 'rc') }}
          tag_name: ${{ github.ref_name }}

  deployment-complete:
    name: Deployment Complete
    runs-on: ubuntu-latest
    needs: [publish-to-pypi, github-release]
    if: always()
    steps:
      - name: Summary
        run: |
          echo "✓ Deployment pipeline completed"
          echo ""
          echo "Published to:"
          echo "  - PyPI: ${{ needs.publish-to-pypi.result }}"
          echo "  - GitHub Release: ${{ needs.github-release.result }}"
          echo ""
          echo "Package: yellowdb"
          echo "Version: ${{ github.ref_name }}"
